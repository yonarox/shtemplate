#!/bin/sh 
# vim: set filetype=sh ts=2 sw=2 sts=2 et si ai: 

# jCommons.lib
# =
#
# Andres Aquino <aquino(at)hp.com>
# Hewlett-Packard Company | EBS
# 

# Heap Size of Memory
# This setting controls the size of the Java heap.
# Properly tuning this parameter reduces the overhead of garbage collection, 
# improving server response time and throughput. 
function jSetSizeofMemory 
{
  # Initial Size and Maximum
  local INITIAL=${1}
  local MAXIMUM=${2}
  
  # undeclared, then default values 
  [ -z "${INITIAL}" ] && INITIAL=${JAVA_MEMINITIAL}
  [ -z "${MAXIMUM}" ] && MAXIMUM=${JAVA_MEMMAXIMUM}

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -Xms${INITIAL} -Xmx${MAXIMUM}"

}

# Permanent Generation Size of Memory on Hold
function jSetPermSizeofMemory 
{
  # Initial Size and Maximum
  local INITIAL=${1}
  local MAXIMUM=${2}
  
  # undeclared, then default values 
  [ -z "${INITIAL}" ] && INITIAL=${JAVA_PERMSIZEINITIAL}
  [ -z "${MAXIMUM}" ] && MAXIMUM=${JAVA_PERMSIZEMAXIMUM}

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -XX:PermSize=${INITIAL} -X:MaxPermSize=${MAXIMUM}"

}

# Set Heapdump of Memory
function jSetHeapDump 
{
  # set where heapdump exists
  local HEAPLOG="${APP_JLOGS}/${U_TIME}.hprof"
  
  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -XX:+HeapDumpOnCtrlBreak -XX:HeapDumpPath=${HEAPLOG}"

}

# Set Garbage Collector behaviour
function jSetGarbageCollector 
{
  # set where heapdump exists
  local GARBAGELOG="${APP_JLOGS}/${U_TIME}.gc"
  
  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -XX:+DisableExplicitGC -XX:file=${GARBAGELOG}"

}

# Timezone
# Set the timezone for a single instance of a JVM process.
function jSetTimeZone 
{
  # local time zone 
  local TIMEZONE=${1}

  # undeclared, use default value
  [ -z "${TIMEZONE}" ] && TIMEZONE=${JAVA_TIMEZONE}

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -Duser.timezone=${TIMEZONE}"

  # set language and code page
  export LANG="${JAVA_LANGUAGE}"
  export LC_ALL="${JAVA_LANGUAGE}"

}

# Security Policy of a JVM execution
# The policy for a Java application environment (specifying which 
# permissions are available for code from various sources) is 
# represented by a Policy object.
function jSetSecurityPolicy 
{
  #
  local POLICY=${1}

  # build policy path in this manner, Path = $APP_HOME + $POLICY 
  POLICY="${APP_JHOME}/${POLICY}"

  # validate or use default value
  [ ! -f ${POLICY} ] && POLICY="${APP_JCONF}/${JAVA_SECPOLICY}"

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -Djava.security.policy=${POLICY}"

}

# Build a CLASSPATH
function jBuildClasspath 
{
  # 
  local CLFILE=

  # Java Classes
  JAVA_CLASSPATH=
  for CLFILE in ${APP_JLIBR}/*.jar
  do
    JAVA_CLASSPATH="${CLFILE}:${JAVA_CLASSPATH}"
  done
  
  # if receive an additional directory
  [ -n "${1}" ] && CLFILE="${APP_HOME}/${1}"
  [ -d "${CLFILE}" ] && JAVA_CLASSPATH="${CLFILE}/:${JAVA_CLASSPATH}"

  export CLASSPATH="`echo "${JAVA_CLASSPATH}:." | sed -e 's/::/:/g'`"

}

# TODO
# function to add one by one each jar file
#function jAddToClasspath
#{}

# 
function jLoadProperties
{
  # load main environment
  LoadEnvironment

  # set java version
  JavaEnvironment ${JAVA_VERSION}

  # already defined APP_HOME ?
  [ -z "${APP_HOME}" ] && LogInfo "Application's Home still not defined" && exit 1
  
  # define new or old structure
  APP_JHOME="${APP_HOME}"
  APP_JABIN="${APP_JHOME}/bin"
  APP_JLIBR="${APP_JHOME}/lib"
  APP_JBCKP="${APP_JHOME}/backup"
  [ -d "${APP_JHOME}/cfg" ] && APP_JCONF="${APP_JHOME}/cfg" || APP_JCONF="${APP_JHOME}/config"
  [ -d "${APP_JHOME}/logs" ] && APP_JLOGS="${APP_JHOME}/logs" || APP_JLOGS="${APP_JHOME}/log"
  [ -d "${APP_JHOME}/tmp" ] && APP_JTEMP="${APP_JHOME}/tmp" || APP_JTEMP="/tmp"
  
  # build environment
  [ -n "${JAVA_MEMINITIAL}" -a -n "${JAVA_MEMMAXIMUM}" ] && jSetSizeofMemory
  [ -n "${JAVA_PERMSIZEINITIAL}" -a -n "${JAVA_PERMSIZEMAXIMUM}" ] && jSetPermSizeofMemory
  [ -n "${JAVA_TIMEZONE}" ] && jSetTimeZone
  [ -n "${JAVA_SECPOLICY}" ] && jSetSecurityPolicy
  jBuildClasspath
}

function jShowProperties
{
  PrintOut "${BLDRED}${APP_NAME}"
  PrintOut "${CRESET} | |- Name       :${TXTYLW} ${APP_NAME}"
  PrintOut "${CRESET} | |- Home       :${TXTYLW} ${APP_JHOME}"
  PrintOut "${CRESET} | |- Binaries   :${TXTYLW} ${APP_JABIN}"
  PrintOut "${CRESET} | |- Library    :${TXTYLW} ${APP_JLIBR}"
  PrintOut "${CRESET} | |- Backup     :${TXTYLW} ${APP_JBCKP}"
  PrintOut "${CRESET} | |- Config     :${TXTYLW} ${APP_JCONF}"
  PrintOut "${CRESET} | |- Logs       :${TXTYLW} ${APP_JLOGS}"
  PrintOut "${CRESET} | |- Temporal   :${TXTYLW} ${APP_JTEMP}"
  PrintOut "${CRESET} | '- Vendor     :${TXTYLW} ${APP_JVNDR}"
  PrintOut "${CRESET} '- JVM"
  PrintOut "${CRESET}  |- Version     :${TXTYLW} ${JVM_VERSION}"
  PrintOut "${CRESET}  |- Language    :${TXTYLW} ${JAVA_LANGUAGE}"
  PrintOut "${CRESET}  |- Timezone    :${TXTYLW} ${JAVA_TIMEZONE}"
  PrintOut "${CRESET}  |- MemInitial  :${TXTYLW} ${JAVA_MEMINITIAL}"
  PrintOut "${CRESET}  |- MemMaximum  :${TXTYLW} ${JAVA_MEMMAXIMUM}"
  PrintOut "${CRESET}  |- PermInitial :${TXTYLW} ${JAVA_PERMSIZEINITIAL}"
  PrintOut "${CRESET}  |- PermMaximum :${TXTYLW} ${JAVA_PERMSIZEMAXIMUM}"
  PrintOut "${CRESET}  |- SecPolicy   :${TXTYLW} ${JAVA_SECPOLICY}"
  PrintOut "${CRESET}  |- Java Flags  :${TXTYLW} ${JAVA_FLAGS}"
  PrintOut "${CRESET}  '- Classpath   :${TXTYLW} ${JAVA_CLASSPATH}${CRESET}"
}

#
function jLoadJARProcess 
{
  # indicate to use RMI
  local CMD=${1}

  if [ "${CMD}" = "USE_RMI" ]
  then
    echo "java ${JAVA_FLAGS} -Djava.rmi.server.codebase=${JAVA_RMI} -jar ${APP_JLIBR}/${JAVA_RMIBASE}" && return 0
    #java ${JAVA_FLAGS} -Djava.rmi.server.codebase=${JAVA_RMI} -jar ${APP_JLIBR}/${JAVA_RMIBASE} 2>&1 &
    echo $! > ${APP_JTEMP}/${APP_NAME}-jar.lck
  else
    echo "java ${JAVA_FLAGS} -jar ${APP_JLIBR}/${JAVA_RMIBASE}" && return 0
    #java ${JAVA_FLAGS} -jar ${APP_JLIBR}/${JAVA_RMIBASE} 2>&1 &
    echo $! > ${APP_JTEMP}/${APP_NAME}-jar.lck

  fi

}

#
function jUnloadJARProcess 
{
  lockfile="${APP_JTEMP}/${APP_NAME}-jar.lck"
  [ -f ${lockfile} ] && kill -9 $(cat ${lockfile}) && rm ${lockfile}

}

#
function jLoadCLASSProcess 
{
  # indicate to use RMI
  local CMD=${1}

  echo "java ${JAVA_FLAGS} -cp ${CLASSPATH} ${JAVA_MAINCLASS} ${CMD}" 
  #java ${JAVA_FLAGS} -cp ${CLASSPATH} ${JAVA_MAINCLASS} ${CMD} 2>&1 &
  echo $! > ${APP_JTEMP}/${APP_NAME}-cls.lck

}

#
function jUnloadCLASSProcess 
{
  lockfile="${APP_JTEMP}/${APP_NAME}-cls.lck"
  [ -f ${lockfile} ] && kill -9 $(cat ${lockfile}) && rm ${lockfile}

}

#

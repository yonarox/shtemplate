#!/bin/sh 
# vim:ts=2:sw=2:sts=2:et:si:ai:ft=sh: 

# java-commons.lib
# -
#
# Andres Aquino <andres.aquino(at)gmail.com>
# SL | StrategyLabs!
# 
export JAVA_HOME=
export JRE_HOME=


#
# Set a java version
java_set_version ()
{
  JAVA_ENV="${1}"

  # if not exist or is empty, exit 
	log_info "java env  : ${JAVA_ENV}"
	log_info "paths.d   : ${HOME}/paths.d"
  [ ! -d ${HOME}/paths.d ] || [ -z "$(ls -A ${HOME}/paths.d)" ] && return 0

  # rebuild path and validate
  JAVA_PROF="${HOME}/paths.d/${JAVA_ENV}"
  
  # java path file? 
  grep java "${JAVA_PROF}" > /dev/null 2>&1 || return 0
	log_info "java home : ${JAVA_PROF}"

  # Workaround
  # for OS-X systems, java commands are in Commands/ directory
  U_LAND="`uname -s`"
  BINARIES="bin"
  [ ${U_LAND} = "Darwin" ] && BINARIES="Commands"

  # rebuild path with java home
  for eachpath in $(cat ${JAVA_PROF})
  do
    # expand vars
    eachpath="$(eval echo ${eachpath} | sed -e 's/^#.*//g;s/ *//g;')"
    [ ! -d ${eachpath} ] && log_info "This dir does not exist: ${eachpath}" && continue
    [ -z ${eachpath} ] && continue
    if [ -d ${eachpath}/${BINARIES} ] 
    then
      # FIX:
      # must to use java bin of JRE_HOME firts 
      JAVA_HOME="${eachpath}"
      JRE_HOME="${JAVA_HOME}/jre"
      [ -d ${JAVA_HOME} ] && PATH="${JAVA_HOME}/${BINARIES}:${U_PATH}"
      [ -d ${JRE_HOME}  ] && PATH="${JRE_HOME}/${BINARIES}:${PATH}"
      log_info "Adding new path: ${eachpath}/${BINARIES}"

      JAVA_VERSION=`java -version 2>&1 | grep "version" | sed -e "s/\"//g;s/.*ion //g"`
      log_info "Setting JAVA_HOME to ${eachpath}, Ver. ${JAVA_VERSION}"
      
      # workaround hp-ux & java16
      [ ${U_LAND} = "HP-UX" ] && [ ${JAVA_ENV} = "java16" ] && SHLIB_PATH=${JAVA_HOME}/jre/lib/PA_RISC2.0/jli
      return 0
    fi
  done

}


# Heap Size of Memory
# This setting controls the size of the Java heap.
# Properly tuning this parameter reduces the overhead of garbage collection, 
# improving server response time and throughput. 
java_set_sizeof_memory ()
{
  # Initial Size and Maximum
  INITIAL=${1}
  MAXIMUM=${2}
  
  # undeclared, then default values 
  [ -z "${INITIAL}" ] && INITIAL=${JAVA_MEMINITIAL}
  [ -z "${MAXIMUM}" ] && MAXIMUM=${JAVA_MEMMAXIMUM}

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -Xms${INITIAL} -Xmx${MAXIMUM}"
  log_info "Setting java flags, Xms${INITIAL} -Xmx${MAXIMUM}"

}

# Permanent Generation Size of Memory on Hold
java_set_permsizeof_memory ()
{
  # Initial Size and Maximum
  INITIAL=${1}
  MAXIMUM=${2}
  
  # undeclared, then default values 
  [ -z "${INITIAL}" ] && INITIAL=${JAVA_PERMSIZEINITIAL}
  [ -z "${MAXIMUM}" ] && MAXIMUM=${JAVA_PERMSIZEMAXIMUM}

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -XX:PermSize=${INITIAL} -X:MaxPermSize=${MAXIMUM}"
  log_info "Setting java flags, -XX:PermSize=${INITIAL} -X:MaxPermSize=${MAXIMUM}"

}

# Set Heapdump of Memory
java_set_heapdump ()
{
  # set where heapdump exists
  HEAPLOG="${APP_JLOGS}/${U_TIME}.hprof"
  
  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -XX:+HeapDumpOnCtrlBreak -XX:HeapDumpPath=${HEAPLOG}"
  log_info "Setting java flags, -XX:+HeapDumpOnCtrlBreak -XX:HeapDumpPath=${HEAPLOG}"

}

# Set Garbage Collector behaviour
java_set_garbagecollector ()
{
  # set where heapdump exists
  GARBAGELOG="${APP_JLOGS}/${U_TIME}.gc"
  
  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -XX:+DisableExplicitGC -XX:file=${GARBAGELOG}"
  log_info "Setting java flags, -XX:+DisableExplicitGC -XX:file=${GARBAGELOG}"

}

# Timezone
# Set the timezone for a single instance of a JVM process.
java_set_timezone ()
{
  # time zone 
  TIMEZONE=${1}

  # undeclared, use default value
  [ -z "${TIMEZONE}" ] && TIMEZONE=${JAVA_TIMEZONE}

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -Duser.timezone=${TIMEZONE}"
	log_info "Setting java flags, -Duser.timezone=${TIMEZONE}"

  # set language and code page
  export LANG="${JAVA_LANGUAGE}"
  export LC_ALL="${JAVA_LANGUAGE}"

}

# Security Policy of a JVM execution
# The policy for a Java application environment (specifying which 
# permissions are available for code from various sources) is 
# represented by a Policy object.
java_set_policy ()
{
  #
  POLICY=${1}

  # build policy path in this manner, Path = $APP_HOME + $POLICY 
  POLICY="${APP_JHOME}/${POLICY}"

  # validate or use default value
  [ ! -f ${POLICY} ] && POLICY="${APP_JCONF}/${JAVA_SECPOLICY}"

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -Djava.security.policy=${POLICY}"
	log_info "Setting java flags, -Djava.security.policy=${POLICY}"

}

# Build a CLASSPATH
java_build_classpath ()
{
  # 
  CLFILE=${1}
	CLASSPATH=
	
	# if we recive one order load file jar properties
	if [ -f "${APP_JCONF}/${CLFILE}" ]
	then
		# Java Classes
		log_info "Loading order by ${APP_JCONF}/${CLFILE}"
		for CLASSFILE in $(cat "${APP_JCONF}/${CLFILE}")
		do
			java_add_toclasspath "${CLASSFILE}"
		done

	else
		# Java Classes
		log_info "Loading order by directory ${APP_JLIBR}"
		for CLASSFILE in ${APP_JLIBR}/*.jar
		do
			java_add_toclasspath "${CLASSFILE}"
		done

	fi

  export CLASSPATH="`echo "${CLASSPATH}:." | sed -e 's/::/:/g;s/^://g'`"
  log_info "Setting java classpath, ${CLASSPATH}"

}

# function to add one by one each jar file
java_add_toclasspath ()
{
	CLASSOBJ=${1}
	
	if [ -f "${CLASSOBJ}" ]
	then
		CLASSPATH="${CLASSPATH}:${CLASSOBJ}"
		log_info "Add JAR as classobject: ${CLASSOBJ}"
		return 0
	fi

	if [ -f "lib/${CLASSOBJ}" ]
	then
		CLASSPATH="${CLASSPATH}:${APP_JLIBR}/${CLASSOBJ}"
		log_info "Add JAR as classobject: ${CLASSOBJ}"
		return 0
	fi

	if [ -f "${APP_JCONF}/${CLASSOBJ}" ]
	then
		CLASSPATH="${CLASSPATH}:${APP_JCONF}/${CLASSOBJ}"
		log_info "Add configuration as classobject: ${CLASSOBJ}"
		return 0
	fi

	if [ -d "${CLASSOBJ}" ]
	then
		CLASSPATH="${CLASSPATH}:${APP_HOME}/${CLASSOBJ}"
		log_info "Add dir as classobject: ${CLASSOBJ}"
		return 0
	fi

}


# 
java_set_environment ()
{
  # load main environment
	# please, first load unix-commons.lib
	load_environment

  # set java version
	APP_JVENDOR=${U_WORK}
  java_set_version "java16"

  # already defined APP_HOME ?
  [ -z "${APP_HOME}" ] && log_message "Application's Home still not defined" && exit 1

  # load default parameters
  if [ ! -f "${APP_HOME}/vendor/java.env" ]
  then 
    log_error "Please, set vendor/java.env"
    exit 1
  fi
  . ${APP_HOME}/vendor/java.env

  # load user app parameters
	[ -d "${APP_HOME}/cfg" ] && APP_JCONF="${APP_HOME}/cfg"
	[ -d "${APP_HOME}/conf" ] && APP_JCONF="${APP_HOME}/conf"
	[ -d "${APP_HOME}/config" ] && APP_JCONF="${APP_HOME}/config"
  if [ ! -f "${APP_JCONF}/appl.env" ]
  then 
    log_error "Please, set ${APP_JCONF}/appl.env"
    exit 1
  fi
  . ${APP_JCONF}/appl.env

  JAVA_FLAGS="-Dappname=${APP_NAME}"
  
  # define new or old structure
  APP_JHOME="${APP_HOME}"
  APP_JABIN="${APP_JHOME}/bin"
  APP_JLIBR="${APP_JHOME}/lib"
  APP_JBCKP="${APP_JHOME}/backup"
	APP_JPRUN="${APP_JHOME}/run"
  [ -d "${APP_JHOME}/logs" ] && APP_JLOGS="${APP_JHOME}/logs" || APP_JLOGS="${APP_JHOME}/log"
  [ -d "${APP_JHOME}/tmp" ] && APP_JTEMP="${APP_JHOME}/tmp" || APP_JTEMP="/tmp"
  
}

java_show_properties ()
{
  puts "${BLDRED}${APP_NAME}"
  puts "${CRESET} | |- Name       :${TXTYLW} ${APP_NAME}"
  puts "${CRESET} | |- Home       :${TXTYLW} ${APP_JHOME}"
  puts "${CRESET} | |- Binaries   :${TXTYLW} ${APP_JABIN}"
  puts "${CRESET} | |- Library    :${TXTYLW} ${APP_JLIBR}"
  puts "${CRESET} | |- Backup     :${TXTYLW} ${APP_JBCKP}"
  puts "${CRESET} | |- Config     :${TXTYLW} ${APP_JCONF}"
  puts "${CRESET} | |- Logs       :${TXTYLW} ${APP_JLOGS}"
  puts "${CRESET} | |- Temporal   :${TXTYLW} ${APP_JTEMP}"
  puts "${CRESET} | '- Vendor     :${TXTYLW} ${APP_JVENDOR}"
  puts "${CRESET} '- JVM"
  puts "${CRESET}  |- Version     :${TXTYLW} ${JAVA_VERSION}"
  puts "${CRESET}  |- Language    :${TXTYLW} ${JAVA_LANGUAGE}"
  puts "${CRESET}  |- Timezone    :${TXTYLW} ${JAVA_TIMEZONE}"
  puts "${CRESET}  |- MemInitial  :${TXTYLW} ${JAVA_MEMINITIAL}"
  puts "${CRESET}  |- MemMaximum  :${TXTYLW} ${JAVA_MEMMAXIMUM}"
  puts "${CRESET}  |- PermInitial :${TXTYLW} ${JAVA_PERMSIZEINITIAL}"
  puts "${CRESET}  |- PermMaximum :${TXTYLW} ${JAVA_PERMSIZEMAXIMUM}"
  puts "${CRESET}  |- SecPolicy   :${TXTYLW} ${JAVA_SECPOLICY}"
  puts "${CRESET}  |- Java Flags  :${TXTYLW} ${JAVA_FLAGS}"
  puts "${CRESET}  '- Classpath   :${TXTYLW} ${CLASSPATH}${CRESET}"
}

# rmi server start
java_rmi_start ()
{
  # initial RMI parameters 
  RMIBASE=${1}
  RMIPORT=${2}

  export JAVA_RMI=

  # undefined, use defaults
  [ -z "${RMIBASE}" ] && RMIBASE=${JAVA_RMIBASE}
  [ -z "${RMIPORT}" ] && RMIPORT=${JAVA_RMIPORT}

  # define flag
  [ -f ${APP_JPRUN}/${APP_NAME}-rmi.lck ] && log_message "Some RMI process exists" && return 1
  if [ ! -f ${APP_JLIBR}/${RMIBASE} ]
  then
    log_message "Any RMI CodeBase file exists, verify ${APP_JLIBR}/${RMIBASE}"
    return 1

  else
		log_info "JAVA Command: rmiregistry ${RMIPORT}"
		if ${APP_EXECUTE}
		then
			rmiregistry ${RMIPORT} 2>&1 &
			echo $! > ${APP_JPRUN}/${APP_NAME}-rmi.lck
		fi
    JAVA_RMI="file:/${APP_JLIBR}/${RMIBASE}"
    export JAVA_RMIBASE="${RMIBASE}"
    export JAVA_RMIPORT="${RMIPORT}"

  fi

}

#
java_rmi_stop ()
{
  lockfile="${APP_JPRUN}/${APP_NAME}-rmi.lck"
  [ -f ${lockfile} ] && kill -9 $(cat ${lockfile}) && rm ${lockfile}

}

#
java_jar_start ()
{
	# if JAVA_RMI is set, then..
  if [ "${JAVA_RMI}" ]
  then
    log_info "JAVA Command: java ${JAVA_FLAGS} -Djava.rmi.server.codebase=${JAVA_RMI} -jar ${APP_JLIBR}/${JAVA_RMIBASE}" 
		if ${APP_EXECUTE}
		then
			java ${JAVA_FLAGS} -Djava.rmi.server.codebase=${JAVA_RMI} -jar ${APP_JLIBR}/${JAVA_RMIBASE} 2>&1 &
			echo $! > ${APP_JPRUN}/${APP_NAME}-jar.lck
		fi

  else
    log_info "JAVA Command: java ${JAVA_FLAGS} -jar ${APP_JLIBR}/${JAVA_RMIBASE}" 
		if ${APP_EXECUTE}
		then
			java ${JAVA_FLAGS} -jar ${APP_JLIBR}/${JAVA_RMIBASE} 2>&1 &
			echo $! > ${APP_JPRUN}/${APP_NAME}-jar.lck
		fi

  fi

}

#
java_jar_stop ()
{
  lockfile="${APP_JPRUN}/${APP_NAME}-jar.lck"
  [ -f ${lockfile} ] && kill -9 $(cat ${lockfile}) && rm ${lockfile}

}

#
java_class_start ()
{
  # indicate to use RMI
  CMD=${1}

  log_info "JAVA Command: java -cp ${CLASSPATH} ${JAVA_FLAGS} ${JAVA_MAINCLASS} ${CMD}" 
	if ${APP_EXECUTE}
	then
		java -cp ${CLASSPATH} ${JAVA_FLAGS} ${JAVA_MAINCLASS} ${CMD} 2>&1 &
    echo $! > ${APP_JPRUN}/${APP_NAME}-cls.lck
	fi

}

#
java_class_stop ()
{
  lockfile="${APP_JPRUN}/${APP_NAME}-cls.lck"
  [ -f ${lockfile} ] && kill -9 $(cat ${lockfile}) && rm ${lockfile}

}

#

# vim: set ts=2 sw=2 sts=2 et si ai ft=sh: 

# Copyright (c) 2012, Andres Aquino <andres.aquino(at)gmail.com>
# This file is licensed under the BSD License version 3 or later. 
# See the LICENSE file.

# default values
JAVA_TIMEZONE=
JAVA_MN_MEMORY=
JAVA_MX_MEMORY=
JAVA_MN_PERMSIZE=
JAVA_MX_PERMSIZE=
JAVA_POLICY=

export JAVA_HOME=
export JRE_HOME=


#
# Set a java version
set_java_version ()
{
  JAVA_ENV="${1}"

  # setted in jvm.properties
  [ -z "${JAVA_ENV}" ] && JAVA_ENV=${JAVA_VERSION}

  # if not exist or is empty, exit 
  log_info "java env  : ${JAVA_ENV}"
  log_info "paths.d   : ${HOME}/paths.d"
  [ ! -d ${HOME}/paths.d ] || [ -z "$(ls -A ${HOME}/paths.d)" ] && return 0

  # rebuild path and validate
  JAVA_PROF="${HOME}/paths.d/${JAVA_ENV}"
  
  # java path file? 
  grep java "${JAVA_PROF}" > /dev/null 2>&1 || return 0
  log_info "java home : ${JAVA_PROF}"

  # Workaround
  # for OS-X systems, java commands are in Commands/ directory
  BINARIES="bin"
  [ -z ${U_LAND} ] && U_LAND="`uname -s`"
  [ ${U_LAND} = "Darwin" ] && BINARIES="Commands"

  # rebuild path with java home
  for eachpath in $(cat ${JAVA_PROF})
  do
    # expand vars
    eachpath="$(eval echo ${eachpath} | sed -e 's/^#.*//g;s/ *//g;')"
    [ -z ${eachpath} ] && continue

    if [ -d ${eachpath}/${BINARIES} ] 
    then
      # FIX:
      # must to use java bin of JRE_HOME firts 
      JAVA_HOME="${eachpath}"
      JRE_HOME="${JAVA_HOME}/jre"
      [ -d ${JAVA_HOME} ] && PATH="${JAVA_HOME}/${BINARIES}:${U_PATH}"
      [ -d ${JRE_HOME}  ] && PATH="${JRE_HOME}/${BINARIES}:${PATH}"
      log_info "Adding new path: ${eachpath}/${BINARIES}"

      JAVA_VERSION=`java -version 2>&1 | grep "version" | sed -e "s/\"//g;s/.*ion //g"`
      log_info "Setting JAVA_HOME to ${eachpath} [ ${JAVA_VERSION} ]"
      
      # workaround hp-ux & java16
      [ ${U_LAND} = "HP-UX" ] && [ ${JAVA_ENV} = "java16" ] && SHLIB_PATH=${JAVA_HOME}/jre/lib/PA_RISC2.0/jli
      return 0
    fi
  done

}


#
# Profile Monitor
# i.e. Introscope Wily
set_java_monitor ()
{
  FLAG_MONITOR=${1}
  [ -z "${FLAG_MONITOR}" ] && FLAG_MONITOR=${JAVA_MONITOR}

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} ${FLAG_MONITOR}"
  log_info "Setting java monitor, ${FLAG_MONITOR}"

}

# Heap Size of Memory
# This setting controls the size of the Java heap.
# Properly tuning this parameter reduces the overhead of garbage collection, 
# improving server response time and throughput. 
set_java_sizeofmemory ()
{
  # Initial Size and Maximum
  INITIAL=${1}
  MAXIMUM=${2}
  
  # undeclared, then default values 
  [ -z "${INITIAL}" ] && INITIAL=${JAVA_MN_MEMORY}
  [ -z "${MAXIMUM}" ] && MAXIMUM=${JAVA_MX_MEMORY}

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -Xms${INITIAL} -Xmx${MAXIMUM}"
  log_info "Setting java flags, Xms${INITIAL} -Xmx${MAXIMUM}"

}

# Permanent Generation Size of Memory on Hold
set_java_permsizeofmemory ()
{
  # Initial Size and Maximum
  INITIAL=${1}
  MAXIMUM=${2}
  
  # undeclared, then default values 
  [ -z "${INITIAL}" ] && INITIAL=${JAVA_MN_PERMSIZE}
  [ -z "${MAXIMUM}" ] && MAXIMUM=${JAVA_MX_PERMSIZE}

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -XX:PermSize=${INITIAL} -XX:MaxPermSize=${MAXIMUM}"
  log_info "Setting java flags, -XX:PermSize=${INITIAL} -XX:MaxPermSize=${MAXIMUM}"

}

# Set Heapdump of Memory
set_java_heapdump ()
{
  # set where heapdump exists
  HEAPLOG="${APP_LOG}/${U_TIME}.hprof"
  
  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -XX:+HeapDumpOnCtrlBreak -XX:HeapDumpPath=${HEAPLOG}"
  log_info "Setting java flags, -XX:+HeapDumpOnCtrlBreak -XX:HeapDumpPath=${HEAPLOG}"

}

# Set Garbage Collector behaviour
set_java_garbagecollector ()
{
  # set where heapdump exists
  GARBAGELOG="${APP_LOG}/${U_TIME}.gc"
  
  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -XX:+DisableExplicitGC -Xverbosegc:file=${GARBAGELOG}"
  log_info "Setting java flags, -XX:+DisableExplicitGC -Xverbosegc:file=${GARBAGELOG}"

}

# Timezone
# Set the timezone and language for a single instance of a JVM process.
set_java_timezone ()
{
  # time zone 
  TIMEZONE=${1}

  # undeclared, use default value
  [ -z "${TIMEZONE}" ] && TIMEZONE=${JAVA_TIMEZONE}

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -Duser.timezone=${TIMEZONE}"
  log_info "Setting java flags, -Duser.timezone=${TIMEZONE}"

  # set language and code page
  export LANG="${LANGUAGE}"
  export LC_ALL="${LANGUAGE}"

}

# Security Policy of a JVM execution
# The policy for a Java application environment (specifying which 
# permissions are available for code from various sources) is 
# represented by a Policy object.
java_set_policy ()
{
  #
  POLICY=${1}

  # build policy path in this manner, Path = $APP_HOME + $POLICY 
  POLICY="${APP_HOME}/${POLICY}"

  # validate or use default value
  [ ! -f ${POLICY} ] && POLICY="${APP_CONFIG}/${JAVA_POLICY}"

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -Djava.security.policy=${POLICY}"
  log_info "Setting java flags, -Djava.security.policy=${POLICY}"

}

# Build a CLASSPATH
build_java_classpath ()
{
  # 
  ORDERFILE=${1}
  CLASSPATH=
  
  # if we recive one order load file jar properties
  if [ -f "${APP_CONFIG}/${ORDERFILE}" ]
  then
    # Java Classes
    log_info "Loading order by ${APP_CONFIG}/${ORDERFILE}"
    for CLASSFILE in $(cat "${APP_CONFIG}/${ORDERFILE}")
    do
      add_java_toclasspath "${CLASSFILE}"
    done

  else
    # Java Classes
    log_info "Loading order by directory ${APP_LIB}"
    for CLASSFILE in ${APP_LIB}/*.jar
    do
      add_java_toclasspath "${CLASSFILE}"
    done

  fi

  export CLASSPATH="`echo "${CLASSPATH}:." | sed -e 's/::/:/g;s/^://g'`"
  log_info "Setting java classpath, ${CLASSPATH}"

}

# function to add one by one each jar file
add_java_toclasspath ()
{
  CLASSOBJ=${1}
  
  if [ -f "${CLASSOBJ}" ]
  then
    CLASSPATH="${CLASSPATH}:${CLASSOBJ}"
    log_info "Add JAR as classobject: ${CLASSOBJ}"
    return 0
  fi

  if [ -f "${APP_LIB}/${CLASSOBJ}" ]
  then
    CLASSPATH="${CLASSPATH}:${APP_LIB}/${CLASSOBJ}"
    log_info "Add JAR as classobject: ${APP_LIB}/${CLASSOBJ}"
    return 0
  fi

  if [ -f "${APP_CONFIG}/${CLASSOBJ}" ]
  then
    CLASSPATH="${CLASSPATH}:${APP_CONFIG}/${CLASSOBJ}"
    log_info "Add configuration as classobject: ${CLASSOBJ}"
    return 0
  fi

  if [ -d "${CLASSOBJ}" ]
  then
    CLASSPATH="${CLASSPATH}:${APP_HOME}/${CLASSOBJ}"
    log_info "Add dir as classobject: ${CLASSOBJ}"
    return 0
  fi

}


# 
set_java_environment ()
{
  # load main environment
  [ -z ${APP_NAME} ] && echo "Please, is mandatory to define APP_NAME before start this app" && exit 1
  [ -z ${APP_HOME} ] && echo "Please, is mandatory to define APP_HOME before start this app" && exit 1
  
  # please, first load unix-commons.lib
  load_environment

  # already defined APP_HOME ?
  [ -z "${APP_HOME}" ] && log_message "Application's Home still not defined" && exit 1

  # load user app parameters
  [ -d "${APP_HOME}/cfg" ] && APP_CONFIG="${APP_HOME}/cfg"
  [ -d "${APP_HOME}/config" ] && APP_CONFIG="${APP_HOME}/config"

	# load application properties
	load_profile "${APP_CONFIG}/${APP_NAME}.properties"

	# load java application properties
	load_profile "${APP_CONFIG}/java.properties"

	# set a simple name to identify the process
  JAVA_FLAGS="-Dappname=${APP_NAME}"
  
  # new or old structure
	# please, see README file
  APP_HOME="${APP_HOME}"
  APP_BIN="${APP_HOME}/bin"
  APP_LIB="${APP_HOME}/lib"
  APP_BACKUP="${APP_HOME}/backup"
  APP_LOCK="${APP_HOME}/run"
  [ -d "${APP_HOME}/log" ] && APP_LOG="${APP_HOME}/log" || APP_LOG="${APP_HOME}/logs"
  [ -d "${APP_HOME}/tmp" ] && APP_TEMP="${APP_HOME}/tmp" || APP_TEMP="/tmp"
  
}

#
# load properties that user set in jvm.properties
set_java_properties ()
{
  [ -n "${JAVA_TIMEZONE}" ] && set_java_timezone
  [ -n "${JAVA_MN_MEMORY}" -o -n "${JAVA_MX_MEMORY}" ] && set_java_sizeofmemory
  [ -n "${JAVA_MN_PERMSIZE}" -o -n "${JAVA_MX_PERMSIZE}" ] && set_java_permsizeofmemory
  [ -n "${JAVA_POLICY}" ] && java_set_policy
  [ -n "${JAVA_VERSION}" ] && set_java_version

}

#
# show properties
get_java_properties ()
{
  puts "${BLDYLW}${APP_NAME}"
  puts "${BLDWHT} | |- Name       :${TXTYLW} ${APP_NAME}"
  puts "${BLDWHT} | |- Home       :${TXTYLW} ${APP_HOME}"
  puts "${BLDWHT} | |- Binaries   :${TXTYLW} ${APP_BIN}"
  puts "${BLDWHT} | |- Library    :${TXTYLW} ${APP_LIB}"
  puts "${BLDWHT} | |- Backup     :${TXTYLW} ${APP_BACKUP}"
  puts "${BLDWHT} | |- Config     :${TXTYLW} ${APP_CONFIG}"
  puts "${BLDWHT} | |- Logs       :${TXTYLW} ${APP_LOG}"
  puts "${BLDWHT} | |- Temporal   :${TXTYLW} ${APP_TEMP}"
  puts "${BLDWHT} '- JVM"
  puts "${BLDWHT}  |- Vendor      :${TXTYLW} ${JAVA_VENDOR}"
  puts "${BLDWHT}  |- Version     :${TXTYLW} ${JAVA_VERSION}"
  puts "${BLDWHT}  |- Language    :${TXTYLW} ${JAVA_LANGUAGE}"
  puts "${BLDWHT}  |- Timezone    :${TXTYLW} ${JAVA_TIMEZONE}"
  puts "${BLDWHT}  |- MemInitial  :${TXTYLW} ${JAVA_MN_MEMORY}"
  puts "${BLDWHT}  |- MemMaximum  :${TXTYLW} ${JAVA_MX_MEMORY}"
  puts "${BLDWHT}  |- PermInitial :${TXTYLW} ${JAVA_MN_PERMSIZE}"
  puts "${BLDWHT}  |- PermMaximum :${TXTYLW} ${JAVA_MX_PERMSIZE}"
  puts "${BLDWHT}  |- SecPolicy   :${TXTYLW} ${JAVA_POLICY}"
  puts "${BLDWHT}  |- Java Flags  :${TXTYLW} ${JAVA_FLAGS}"
  puts "${BLDWHT}  '- Classpath   :${TXTYLW} ${CLASSPATH}${CRESET}"
}

# rmi server start
start_java_rmi ()
{
  # initial RMI parameters 
  RMIBASE=${1}
  RMIPORT=${2}

  export JAVA_RMI=

  # undefined, use defaults
  [ -z "${RMIBASE}" ] && RMIBASE=${JAVA_RMIBASE}
  [ -z "${RMIPORT}" ] && RMIPORT=${JAVA_RMIPORT}

  # define flag
  [ -f ${APP_LOCK}/${APP_NAME}-rmi.lck ] && log_message "Some RMI process exists" && return 1
  if [ ! -f ${APP_LIB}/${RMIBASE} ]
  then
    log_message "Any RMI CodeBase file exists, verify ${APP_LIB}/${RMIBASE}"
    return 1

  else
    log_info "JAVA Command: rmiregistry ${RMIPORT}"
    if ${APP_EXECUTE}
    then
      rmiregistry ${RMIPORT} 2>&1 &
      echo $! > ${APP_LOCK}/${APP_NAME}-rmi.lck
    fi
    JAVA_RMI="file:/${APP_LIB}/${RMIBASE}"
    export JAVA_RMIBASE="${RMIBASE}"
    export JAVA_RMIPORT="${RMIPORT}"

  fi

}

#
stop_java_rmi ()
{
  lockfile="${APP_LOCK}/${APP_NAME}-rmi.lck"
  [ -f ${lockfile} ] && kill -9 $(cat ${lockfile}) && rm ${lockfile}

}

#
start_java_jar ()
{
  # if JAVA_RMI is set, then..
  if [ "${JAVA_RMI}" ]
  then
    log_info "JAVA Command: java -cp ${CLASSPATH} -Djava.rmi.server.codebase=${JAVA_RMI} ${JAVA_FLAGS} ${JAVA_SERVERCLASS}" 
    if ${APP_EXECUTE}
    then
      java -cp ${CLASSPATH} -Djava.rmi.server.codebase=${JAVA_RMI} ${JAVA_FLAGS} ${JAVA_SERVERCLASS} 2>&1 &
      echo $! > ${APP_LOCK}/${APP_NAME}-jar.lck
    fi

  else
    log_info "JAVA Command: java -cp ${CLASSPATH} ${JAVA_FLAGS} ${JAVA_SERVERCLASS}" 
    if ${APP_EXECUTE}
    then
      java -cp ${CLASSPATH} ${JAVA_FLAGS} ${JAVA_SERVERCLASS} 2>&1 &
      echo $! > ${APP_LOCK}/${APP_NAME}-jar.lck
    fi

  fi

}

#
stop_java_jar ()
{
  lockfile="${APP_LOCK}/${APP_NAME}-jar.lck"
  [ -f ${lockfile} ] && kill -9 $(cat ${lockfile}) && rm ${lockfile}

}

#
start_java_class ()
{
  # indicate to use RMI
  CMD=${1}

  log_info "JAVA Command: java -cp ${CLASSPATH} ${JAVA_FLAGS} ${JAVA_MAINCLASS} ${CMD}" 
  if ${APP_EXECUTE}
  then
    java -cp ${CLASSPATH} ${JAVA_FLAGS} ${JAVA_MAINCLASS} ${CMD} 2>&1 &
    echo $! > ${APP_LOCK}/${APP_NAME}-cls.lck
  fi

}

#
stop_java_class ()
{
  lockfile="${APP_LOCK}/${APP_NAME}-cls.lck"
  [ -f ${lockfile} ] && kill -9 $(cat ${lockfile}) && rm ${lockfile}

}

#

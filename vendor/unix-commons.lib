#!/bin/sh 
# vim:ts=2:sw=2:sts=2:et:si:ai:ft=sh: 

# unix-commons.lib
# -
#
# Andres Aquino <andres.aquino(at)gmail.com>
# SL | StrategyLabs!
# 


# set environment
load_environment ()
{
  # Predefined variables
  export U_LAND="`uname -s`"
  export U_HOST="`hostname | sed -e 's/\..*//g'`"
  export U_DATE="`date "+%Y%m%d"`"
  export U_HOUR="`date "+%H%M"`"
  export U_TIME="${U_DATE}${U_HOUR}"
  export U_NAME="Andres Aquino"
  export U_MAIL="aquino(at)hp.com"
  export U_WORK="HP | Enterprise Business Services"
  export U_TERM="xterm"
  export LANG="C"

  # setting locale  
  SEQESCAPE="\033"
  FUNCTIONS="declare"

	# if DEBUG flag is not set
	${U_DEBG} || U_DEBG=true

	# specific setup for Linux|SunOS|OS X
  [ "${U_LAND}" = "Linux" -o "${U_LAND}" = "SunOS" ] && SEQESCAPE="\e" 
	
	# specific setup for HP UX
  if [ "${U_LAND}" = "HP-UX" ]
  then
    # input mode
    set -o vi
    umask 0007
    FUNCTIONS="typeset"
    SEQESCAPE="\033"
  fi

  # loading a terminal or only a process
  stty 2> /dev/null | grep "baud" > /dev/null 2>&1
  if [ $? -eq 0 ]
  then
    stty erase "^?"
    stty intr "^C" 
    stty kill "^U" 
    stty stop "^S"
    stty susp "^Z"
    stty werase "^W"

    # command line _eye candy_
    U_TERM="CONSOLE"

    # command line _eye candy_
    CRESET="${SEQESCAPE}[0m"    # Text Reset
    TXTBLK="${SEQESCAPE}[0;30m" # Black - Regular
    TXTRED="${SEQESCAPE}[0;31m" # Red
    TXTGRN="${SEQESCAPE}[0;32m" # Green
    TXTYLW="${SEQESCAPE}[0;33m" # Yellow
    TXTBLU="${SEQESCAPE}[0;34m" # Blue
    TXTPUR="${SEQESCAPE}[0;35m" # Purple
    TXTCYN="${SEQESCAPE}[0;36m" # Cyan
    TXTWHT="${SEQESCAPE}[0;37m" # White
    BLDBLK="${SEQESCAPE}[1;30m" # Black - Bold
    BLDRED="${SEQESCAPE}[1;31m" # Red
    BLDGRN="${SEQESCAPE}[1;32m" # Green
    BLDYLW="${SEQESCAPE}[1;33m" # Yellow
    BLDBLU="${SEQESCAPE}[1;34m" # Blue
    BLDPUR="${SEQESCAPE}[1;35m" # Purple
    BLDCYN="${SEQESCAPE}[1;36m" # Cyan
    BLDWHT="${SEQESCAPE}[1;37m" # White
    UNKBLK="${SEQESCAPE}[4;30m" # Black - Underline
    UNDRED="${SEQESCAPE}[4;31m" # Red
    UNDGRN="${SEQESCAPE}[4;32m" # Green
    UNDYLW="${SEQESCAPE}[4;33m" # Yellow
    UNDBLU="${SEQESCAPE}[4;34m" # Blue
    UNDPUR="${SEQESCAPE}[4;35m" # Purple
    UNDCYN="${SEQESCAPE}[4;36m" # Cyan
    UNDWHT="${SEQESCAPE}[4;37m" # White
    BAKBLK="${SEQESCAPE}[40m"   # Black - Background
    BAKRED="${SEQESCAPE}[41m"   # Red
    BAKGRN="${SEQESCAPE}[42m"   # Green
    BAKYLW="${SEQESCAPE}[43m"   # Yellow
    BAKBLU="${SEQESCAPE}[44m"   # Blue
    BAKPUR="${SEQESCAPE}[45m"   # Purple
    BAKCYN="${SEQESCAPE}[46m"   # Cyan
    BAKWHT="${SEQESCAPE}[47m"   # White

  else
    # command line _eye candy_
    U_TERM="TERM"
    CRESET="${SEQESCAPE}[0m"    # Text Reset
    TXTBLK="${SEQESCAPE}[0;30m" # Black - Regular
    TXTRED="" # Red
    TXTGRN="" # Green
    TXTYLW="" # Yellow
    TXTBLU="" # Blue
    TXTPUR="" # Purple
    TXTCYN="" # Cyan
    TXTWHT="" # White

  fi
  log_info "Set local environment"

}


# Prints a message 
puts ()
{
  message="${1}"

  case "${U_LAND}" in
    "HP-UX")
      echo "${message}"
    ;;
      
    "Linux"|"Darwin"|"SunOS")
      echo -e -n "${message} \n"
    ;;
    
    *)
      ${_echo} "${message} "
    ;;
  esac

}

# function
load_profile ()
{
  U_PROFILE=${1}
  if [ -s ${U_PROFILE} ]
  then
    . ${U_PROFILE} > /dev/null 2>&1
    U_PROFILE=`basename ${U_PROFILE}`
    log_info "Loading profile ${U_PROFILE}"
  fi

}

# Define a execution unix path reading each file in Paths.d
set_local_paths ()
{
  LPATH=

  # System binaries
  [ -d /bin ] && LPATH=/bin:${LPATH}
  [ -d /sbin ] && LPATH=/sbin:${LPATH}
  [ -d /usr/bin ] && LPATH=/usr/bin:${LPATH}
  [ -d /usr/sbin ] && LPATH=/usr/sbin:${LPATH}
 
  # if not exist or is empty, exit 
  [ ! -d ${HOME}/paths.d ] || [ -z "$(ls -A ${HOME}/paths.d)" ] && return 0

  # lock for any file with path as contents
  for pathfile in ${HOME}/paths.d/[0-9][0-9]*
  do
    # empty file
    [ ! -s ${pathfile} ] && continue
    
    # not include java paths
    grep java ${pathfile} > /dev/null 2>&1 && continue 

    # for each file, get paths and add to execution path
    bname=`basename ${pathfile}`
    isValid=false
    for eachpath in $(cat ${pathfile})
    do
      # get one line (path) and verify: is this a directory? 
      eachpath="$(eval echo ${eachpath} | sed -e 's/^#.*//g;s/ *//g;')"
      [ -z ${eachpath} ] && continue
      [ ! -d ${eachpath} ] && continue
 
      isValid=true
      LPATH=${eachpath}:${LPATH}
      log_message "Adding dir: ${eachpath}"
    done
    ${isValid} && log_info "Loading paths ${bname}"
  done

  # User binaries  
  [ -d ${HOME}/bin ] && LPATH="${HOME}/bin:${LPATH}"

  LPATH="`echo "${LPATH}" | sed -e 's/::/:/g'`"
  LPATH="`echo "${LPATH}:${U_PATH}" | sed -e 's/::/:/g;s/\.://g;s/^://g'`"
  export PATH=".:${LPATH}"

  # try to preserve as an initial path of user environment
  U_PATH=${PATH}

}

# Sets PS1 and PS2 using an _eye candy_ cmd line, if you're using Git it shows branch name
set_inputcommand_style ()
{

  [ "${U_TERM}" = "TERM" ] && return 0
  if [ "${U_LAND}" = "HP-UX" ]
  then
    export PS1="$(echo "\n${BLDWHT}[ ${BLDYLW}${U_ADDRESS}${BLDWHT} | ${CRESET}${U_HOST}${BLDWHT}] \${PWD} \n${TXTWHT}${USER} ${CRESET}\$ ")"
  else
    # if you're a developer, set your git profile (yes...)
    if [ -s ~/git.profile ]
    then
      export PS1="\e]1;${U_ADDRESS}\a\e]2;${U_ADDRESS}:${U_HOST}\a\
                  \n\[${BLDWHT}\][ \[${BLDYLW}\]${U_ADDRESS}\[${BLDWHT}\] | \[${CRESET}\]${U_HOST}\[${BLDWHT}\] ]\[${BLDGRN}\]\$(__git_ps1 '(%s)')\[${CRESET}\] \w \
                  \n\[${CRESET}\]${USER} \$ "
    else
      export PS1="\e]1;${U_ADDRESS}\a\e]2;${U_ADDRESS}:${U_HOST}\a\
                  \n\[${BLDWHT}\][ \[${BLDYLW}\]${U_ADDRESS}\[${BLDWHT}\] | \[${CRESET}\]${U_HOST}\[${BLDWHT}\] ]\[${CRESET}\] \w \
                  \n\[${CRESET}\]${USER} \$ "
    fi
  fi
  export PS2=" ..> "
  unset USERNAME
}

# function
GetCurrTime ()
{
  U_DATE="`date "+%Y%m%d"`"
  U_HOUR="`date "+%H%M"`"
  U_TIME="${U_DATE}${U_HOUR}"
}

# logger
# function
log_info ()
{
  message="${1}"
  [ "${U_TERM}" = "TERM" ] && return 0
  ${U_DEBG} && puts " ${BLDBLU}: ${CRESET}${message}"

}

# function
log_error ()
{
  message="${1}"
  [ "${U_TERM}" = "TERM" ] && return 0
  ${U_DEBG} && puts "${BLDRED}* ${CRESET}${message}"
}

# function
log_message ()
{
  message="${1}"
  [ "${U_TERM}" = "TERM" ] && return 0
  puts "${BLDYLW}> ${CRESET}${message}"

}

# Shows MD5 of this profile
show_version ()
{
  U_FILEVERSION=`openssl dgst -md5 ~/unix.profile | rev | cut -c-4 | rev`
  puts "Profile ver.${U_FILEVERSION} (${U_LAND}) \n${U_WORK} \n\nDeveloped by \nAndres Aquino <aquino(at)hp.com>"
}

# Shows Information about this system
show_internals ()
{
  GetCurrTime
  puts "-"
  puts "${TXTRED}OpSystem  ${CRESET}: ${U_LAND}"
  puts "${TXTRED}Hostname  ${CRESET}: ${U_HOST}"
  puts "${TXTRED}CurrDate  ${CRESET}: ${U_DATE}"
  puts "${TXTRED}CurrHour  ${CRESET}: ${U_HOUR}"
  puts "${TXTRED}IpAddress ${CRESET}: ${U_ADDRESS}"
  puts "${TXTRED}PathApps  ${CRESET}: ${PATH}"

}


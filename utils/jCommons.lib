#!/bin/sh 
# vim: set filetype=sh ts=2 sw=2 sts=2 et si ai: 

# jCommons.lib
# =
#
# Andres Aquino <aquino(at)hp.com>
# Hewlett-Packard Company | EBS
# 

# set Environment
jSetEnvironment () 
{
  if [ -n ${APHOME} ]
  then
    . ${APHOME}/java.env
  else
    echo "Please, set APHOME"
  fi

}

# Heap Size of Memory
# This setting controls the size of the Java heap.
# Properly tuning this parameter reduces the overhead of garbage collection, 
# improving server response time and throughput. 
jSetSizeofMemory ()
{
  # Initial Size and Maximum
  local INITIAL=${1}
  local MAXIMUM=${2}
  
  # undeclared, then default values 
  [ ! -n ${INITIAL} ] && INITIAL=${JMINITIAL}
  [ ! -n ${MAXIMUM} ] && MAXIMUM=${JMMAXIMUM}

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -Xms${INITIAL} -Xmx${MAXIMUM} "

}

# Permanent Generation Size of Memory on Hold
jSetPermSizeofMemory ()
{
  # Initial Size and Maximum
  local INITIAL=${1}
  local MAXIMUM=${2}
  
  # undeclared, then default values 
  [ ! -n ${INITIAL} ] && INITIAL=${JPINITIAL}
  [ ! -n ${MAXIMUM} ] && MAXIMUM=${JPMAXIMUM}

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -XX:PermSize=${INITIAL} -X:MaxPermSize=${MAXIMUM} "

}

# Heap Dump of Memory
jSetHeapDump ()
{
  # set where heapdump exists
  local HEAPLOG="${APHOME}/logs/${APTIME}.hprof"
  
  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -XX:+HeapDumpOnCtrlBreak "
  JAVA_FLAGS="${JAVA_FLAGS} -XX:HeapDumpPath=${HEAPLOG} "

}

# Garbage Collector behaviour
jSetGarbageCollector ()
{
  # set where heapdump exists
  local GARBAGELOG="${APHOME}/logs/${APTIME}.gc"
  
  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -XX:+DisableExplicitGC "
  JAVA_FLAGS="${JAVA_FLAGS} -XX:file=${GARBAGELOG} "

}

# Timezone
# Set the timezone for a single instance of a JVM process.
jSetTimeZone ()
{
  # local time zone 
  local TIMEZONE=${1}

  # undeclared, use default value
  [ ! -n ${TIMEZONE} ] && TIMEZONE=${JTIMEZONE}

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -Duser.timezone=${TIMEZONE} "

}

# Security Policy of a JVM execution
# The policy for a Java application environment (specifying which 
# permissions are available for code from various sources) is 
# represented by a Policy object.
jSetSecurityPolicy ()
{
  #
  local POLICY=${1}

  # build policy path in this manner, Path = $APHOME + $POLICY 
  POLICY="${APHOME}/${POLICY}"

  # validate or use default value
  [ ! -e ${POLICY} ] && POLICY=${JSEPOLICY}

  # ... and setting
  JAVA_FLAGS="${JAVA_FLAGS} -Djava.security.policy=${POLICY}"

}


jSetRMIProcess ()
{
  _JRMIBASE=${1}
  _JRMIPORT=${2}
  export JAVA_RMI=

  # define flag
  _JRMIBASE=${APHOME}/lib/${_JRMIBASE}
  if [ ! -f ${_JRMIBASE} ]
  then
    printto "Any RMI CodeBase file exists, verify ${_JRMIBASE}"
    _JRMIPORT=0
    return 1
  else
    JAVA_RMI="file://${_JRMIBASE}"
  fi

}

jBuildClasspath ()
{
  # Java Classes
  JAVA_CLASSPATH="."
  for classfile in "${APHOME}/lib/*.jar"
  do
    JAVA_CLASSPATH="${classfile}:${JAVA_CLASSPATH}"
  done
  
  # if receive an additional directory
  [ -d ${APHOME}/${1} ] && JAVA_CLASSPATH="${APHOME}/${1}:${JAVA_CLASSPATH}"

  export CLASSPATH="${JAVA_CLASSPATH}:."

}


#
